var chatbox=angular.module("chatbox",[]);chatbox.directive("chatbox",function(DirFactory,VarFactory,BotTriggerFactory,ConfigFactory){return{restrict:"EA",scope:{ngOrganization:"@",ngVarZero:"@"},template:'<div class="chat-block visible-in" ng-show="showChat">   <div class="msg_head"><span><img src="chatbot/images/chat-icon.png" ng-show="state ==2? true:false"><img src="chatbot/images/chat-icon-robot.png" ng-show="state == 2? false:true"></span><span class="chat-title"> Chat with {{ngOrganization}} Support</span><span ng-click="click()" class="chat-min"></span></div>   <div class="msg_wrap" scroll-glue>    <div class="msg_body" scroll-glue>    <div><div class="msg_a" hidden="true">tr</div></div>     <div><div class="msg_b" hidden="true">trtr</div></div>   <div class="msg_push"><p class="enter-msg">{{response}}</p></div>     </div>    </div>   <input type="text" ng-keyup="$event.keyCode==13?sayChat():null" ng-model="Userinput.text" class="chattext" />    <button ng-click="sayChat()" class="send" type="submit">Send</button></div><div class="chatbox_arrow" ng-show="showChat"></div><div id="chat_button" class="circle_menu" ng-click="click()"><img src="chatbot/images/brain.png" ng-show="!showChat" class ="btn_img"><img src="chatbot/images/brain.png" ng-show="showChat" class ="btn_img"></i></div>',controller:["$rootScope","$scope","$http",function($rootScope,$scope,$http){function doGET(e,o){$http.get(o).then(function(o){var s=o.data;callback(e,s)})}function setChildScope(varGroupID,scope){var data=eval("$scope."+scope);callback(varGroupID,data)}function callback(varGroupID,data){$scope.variableGroups.forEach(function(obj){obj.ID==varGroupID&&obj.varGroup.forEach(function(obj){console.log("[BOTConsole] callback: Updating this ID with new value"),console.log(obj.ID),console.log(eval(obj.assign)),pushVar(obj.ID,eval(obj.assign))})}),console.log("[BOTConsole] callback: Variables after the update"),console.log($scope.variables)}function updateVarGroup(varGroupID){console.log("[BOTConsole] updateVarGroup: Updating Var Group "+varGroupID),console.log($scope.variableGroups),$scope.variableGroups.forEach(function(obj){if(obj.ID==varGroupID){console.log("[BOTConsole] updateVarGroup: Found a match for "+varGroupID);var ID=varGroupID;eval(obj.setter)}})}function pushVar(e,o){for(i=0;i<$scope.variables.length;i++){var s=!1;if($scope.variables[i].id==e){console.log("[BOTConsole] pushVar: Var exists"),console.log("[BOTConsole] pushVar: Var ID and new value"),console.log(e),console.log(o),$scope.variables[i].value=o,s=!0;break}}s||(console.log("[BOTConsole] pushVar: Var does not exist"),$scope.variables.push({id:e,value:o}))}function getVar(e){for(i=0;i<$scope.variables.length;i++){var o=null;if($scope.variables[i].id==e){console.log("[BOTConsole] getVar: Var exists"),o=$scope.variables[i].value;break}}return o}function askVar(arr,successDirective){console.log("[BOTConsole] askVar: Inside askVar");var BreakException={};try{arr.forEach(function(e){var o=getVar(e.ID);if(null==o||""==o)throw console.log("[BOTConsole] askVar: Empty var found for"),console.log(e.ID),sendDirectivetoBot(e.action),BreakException}),$scope.directives.forEach(function(obj){console.log("[BOTConsole] askVar: Evaluating custom directive "+obj.ID);var dir=obj.ID+"";successDirective.indexOf(dir)>-1&&(console.log("[BOTConsole] askVar: Found the custom directive and now evaluating"),eval(obj.action))})}catch(e){if(e!==BreakException)throw e}}function serializeData(e){if(!angular.isObject(e))return null==e?"":e.toString();var o=[];for(var s in e)if(e.hasOwnProperty(s)){var n=e[s];o.push(encodeURIComponent(s)+"="+encodeURIComponent(null==n?"":n))}var t=o.join("&").replace(/%20/g,"+");return t}function constructResponse(e){for(i=0;i<$scope.variables.length;i++)e=e.replace($scope.variables[i].id,$scope.variables[i].value);return console.log("[BOTConsole] constructResponse: Final message is "+e),e}function evaluateResponse(msg){var returnVal=msg;if(msg.indexOf("DIRDONOTTRAIN")>-1&&(console.log("[BOTConsole] evaluateResponse: Do not train the question & answer"),train=!1,returnVal=returnVal.replace("DIRDONOTTRAIN","")),msg.indexOf("DIRROUTETOBOT")>-1&&(console.log("[BOTConsole] evaluateResponse: State change to 0(BOT)"),2==$scope.state&&($scope.state=0,endChat()),history=[],returnVal=returnVal.replace("DIRROUTETOBOT","Operator Disconnected")),msg.indexOf("DIRROUTETOAI")>-1&&(console.log("[BOTConsole] evaluateResponse: State change to 1(AI)"),$scope.state=1,returnVal=returnVal.replace("DIRROUTETOAI","")),msg.indexOf("DIRROUTETOOPERATOR")>-1&&($('<div class="connectionAlert">Operator Joined The Conversation</div>').insertBefore(".enter-msg"),textSpeech("Operator Connected"),console.log("[BOTConsole] evaluateResponse: State change to 2(OPERATOR)"),$scope.state=2,initChat(),returnVal=returnVal.replace("DIRROUTETOOPERATOR","")),msg.indexOf("DIRDONOTHING")>-1&&(returnVal=returnVal.replace("DIRDONOTHING","")),msg.indexOf("DIRSTORE")>-1&&msg.indexOf("ENDDIRSTORE")>-1){var tmp=msg.substring(msg.indexOf("DIRSTORE"),msg.indexOf("ENDDIRSTORE")+"ENDDIRSTORE".length);returnVal=returnVal.replace(tmp,"");var split=tmp.split(" "),varID=split[1],varValue=msg.substring(msg.indexOf(varID)+varID.length+1,msg.indexOf("ENDDIRSTORE")-1);console.log("[BOTConsole] evaluateResponse: Evaluating DIRSTORE. ID and Value"),console.log(varID),console.log(varValue),pushVar(varID,varValue),console.log("[BOTConsole] evaluateResponse: Variables"),console.log($scope.variables)}if(msg.indexOf("DIRUPDATEVARGROUPS")>-1&&msg.indexOf("ENDDIRUPDATEVARGROUPS")>-1){var tmp=msg.substring(msg.indexOf("DIRUPDATEVARGROUPS"),msg.indexOf("ENDDIRUPDATEVARGROUPS")+"ENDDIRUPDATEVARGROUPS".length);returnVal=returnVal.replace(tmp,"");var split=msg.substring(msg.indexOf("DIRUPDATEVARGROUPS")+"DIRUPDATEVARGROUPS".length+1,msg.indexOf("ENDDIRUPDATEVARGROUPS")-1).split(" ");console.log("[BOTConsole] evaluateResponse: Updating var groups"),split.forEach(function(e){console.log("[BOTConsole] evaluateResponse: Updating var group "+e),updateVarGroup(e)})}return $scope.directives.forEach(function(obj){console.log("[BOTConsole] evaluateResponse: Evaluating custom directive "+obj.ID);var dir=obj.ID+"";msg.indexOf(dir)>-1&&(console.log("[BOTConsole] evaluateResponse: Found a custom directive and now evaluating"),returnVal=returnVal.replace(dir,""),eval(obj.action))}),returnVal}function sendDirectivetoBot(e){console.log("[BOTConsole] sendDirectivetoBot: @ Now conversation handle by  AIML @");var o;""==$scope.con_ID?o={say:e}:(console.log("else if"),o={say:e,convo_id:$scope.con_ID}),$http({method:"POST",url:$scope.config.botUrl,dataType:"json",data:serializeData(o),headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(e){$scope.con_ID=e.convo_id,console.log("[BOTConsole] sendDirectivetoBot: SUCCESS response from bot"),console.log("[BOTConsole] sendDirectivetoBot: Data"),console.log(e);var o=constructResponse(evaluateResponse(e.botsay));console.log("[BOTConsole] sendDirectivetoBot: Response and state"),console.log(o),console.log($scope.state),1==$scope.state?messageAI():2==$scope.state&&console.log("[BOTConsole] sendDirectivetoBot: ERROR state change from 0 to 2"),""!=o&&(console.log("[BOTConsole] sendDirectivetoBot: Writing the output to the div"),$('<div class="msg_a">'+o+"</div>").insertBefore(".enter-msg"),textSpeech(o))}).error(function(){console.log("[BOTConsole] sendDirectivetoBot: ERROR in bot response. Routing to AI"),$scope.state=1,messageAI()})}function messageBot(){console.log("[BOTConsole] messageBot: @ Now conversation handle by  AIML @");var e;return e=""==$scope.con_ID?{say:$scope.usermessage}:{say:$scope.usermessage,convo_id:$scope.con_ID},""==$scope.usermessage?void console.log("[BOTConsole] messageBot: ERROR nothing to send"):void $http({method:"POST",url:$scope.config.botUrl,dataType:"json",data:serializeData(e),headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(e){$scope.con_ID=e.convo_id,console.log("[BOTConsole] messageBot: SUCCESS response from bot"),console.log("[BOTConsole] messageBot: Data"),console.log(e);var o=constructResponse(evaluateResponse(e.botsay));return console.log("[BOTConsole] messageBot: Response and state"),console.log(o),console.log($scope.state),1==$scope.state?void messageAI():(2==$scope.state&&console.log("[BOTConsole] messageBot: ERROR state change from 0 to 2"),$scope.usermessage="",void(""!=o&&(console.log("[BOTConsole] messageBot: Writing the output to the div"),$('<div class="msg_a">'+o+"</div>").insertBefore(".enter-msg"),textSpeech(o))))}).error(function(){console.log("[BOTConsole] messageBot: ERROR in bot response. Routing to AI"),$scope.state=1,messageAI()})}function messageAI(){return console.log("[BOTConsole] messageAI: @ Now conversation handle by  AI @"),""==$scope.usermessage?void console.log("[BOTConsole] messageAI: ERROR nothing to send"):void $http({method:"POST",url:$scope.config.aiUrl,dataType:"json",data:serializeData({user_question:$scope.usermessage}),headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(e){console.log("[BOTConsole] messageAI: SUCCESS response from AI"),console.log("[BOTConsole] messageAI: "+e);var o=constructResponse(evaluateResponse(e.toString()));return console.log("[BOTConsole] messageAI: Response and state"),console.log("[BOTConsole] messageAI: "+o),console.log("[BOTConsole] messageAI: "+$scope.state),2==$scope.state?void console.log("[BOTConsole] messageAI: State change to 2"):(0==$scope.state&&(console.log("[BOTConsole] messageAI: ERROR State change to 0"),messageBot()),$scope.usermessage="",console.log("[BOTConsole] messageAI: Writing the output to the div"),$('<div class="msg_a">'+o+"</div>").insertBefore(".enter-msg"),void textSpeech(o))}).error(function(){console.log("[BOTConsole] messageBot: ERROR in bot response. Do nothing")})}function constructSessionID(e){return e.replace(/:|-/g,"")}function initChat(){console.log("[BOTConsole] initChat: URL      - "+$scope.config.activemqUrl),console.log("[BOTConsole] initChat: LOGIN    - "+$scope.config.activemqLogin),console.log("[BOTConsole] initChat: PASSCODE - "+$scope.config.activemqPw),console.log("[BOTConsole] initChat: DESTINATION - "+$scope.config.activemqDestination),client=Stomp.client($scope.config.activemqUrl),client.connect($scope.config.activemqLogin,$scope.config.activemqPw,function(e){path=constructSessionID(e.headers.session+""),$scope.config.activemqDestination=$scope.config.activemqDestination+""+$scope.con_ID,""==fixDestination&&(fixDestination=$scope.config.activemqDestination),console.log("[BOTConsole]initChat: "+$scope.config.activemqDestination),sendChat(),client.subscribe($scope.config.activemqDestination,function(e){console.log("[BOTConsole] initChat: MESSAGE is "),console.log(e);var o=constructSessionID(e.headers["message-id"]+""),s=constructResponse(evaluateResponse(e.body));console.log("[BOTConsole] initChat: subscribe: MSG - "+s),o.indexOf(path)>-1?(console.log("[BOTConsole] initChat: subscribe: Message from user"),$('<div class="msg_b">'+s+"</div>").insertBefore(".enter-msg")):(console.log("[BOTConsole] initChat: subscribe: Message from operator"),"Operator Disconnected"==s?$('<div class="connectionAlert">Operator Left The Conversation</div>').insertBefore(".enter-msg"):$('<div class="msg_a">'+s+"</div>").insertBefore(".enter-msg"),textSpeech(s)),glueScroll()})},function(e){console.log("Trying To Connect With  Chat Server : "+e),alert("Trying To Connect With Chat Server :"+e),initChat(),isReconnected=!0})}function sendChat(){if(glueScroll(),""==$scope.usermessage)return void console.log("[BOTConsole] messageBot: ERROR nothing to send");if(1==train?client.send($scope.config.activemqDestination,{},$scope.usermessage):(client.send($scope.config.activemqDestination,{},"DIRDONOTTRAIN "+$scope.usermessage),train=!0),isReconnected)console.log("Do not sent the history chats...... ");else if(!isSend){var e=JSON.stringify(history);client.send(fixDestination,{},startstr+e),isSend=!0,isReconnected=!1,console.log("********************************"+startstr+e)}glueScroll()}function endChat(){client.disconnect(function(){console.log("[BOTConsole] endChat: Ending chat"),console.log("[BOTConsole] endChat: Ending chat(NOW STATE IS )==========="+$scope.state)}),$scope.$apply(function(){$scope.state=0})}function textSpeech(e){console.log("[BOTConsole] textSpeech: voice : "+e);var o=new SpeechSynthesisUtterance(e);o.lang="en-US",o.pitch=1,o.rate=1,o.voiceURI="native",o.volume=1,speechSynthesis.speak(o),chatHistory("BOT",e,messageTime())}function glueScroll(){scrolled+=200,$(".msg_body").animate({scrollTop:scrolled}),$(".msg_wrap").animate({scrollTop:scrolled})}function chatHistory(e,o,s){history.push({from:e,msg:o,time:s})}function messageTime(){var e=new Array("Sun","Mon","Tue","Wed","Thu","Fri","Sat "),o=e[(new Date).getDay()]+" "+(new Date).toLocaleString();return o}$scope.config,$scope.state=0,$scope.operator_status=null,$scope.usermessage="",$scope.con_ID="";var path="",client,scrolled=0,fixDestination="",history=[],startstr='"VARHISTORY":',isSend=!1,train=!0,isReconnected=!1;$scope.Userinput={},$scope.Userinput.text="",ConfigFactory.fetch().then(function(e){console.log("[BOTConsole] ConfigFactory.fetch: Loading configurations"),$scope.config=e});var bounce=new Bounce;bounce.translate({from:{x:0,y:0},to:{x:0,y:-50},easing:"hardsway",duration:2e3,delay:800,stiffness:2}),bounce.rotate({from:0,to:360,duration:1e3,delay:2e3}),bounce.applyTo($("#chat_button")).then(function(){console.log("Animation complete")}),DirFactory.fetch().then(function(e){$scope.directives=e.dirs,console.log("[BOTConsole] DirFactory.fetch: Loading directories"),console.log(e)}),$scope.variables=[],VarFactory.fetch().then(function(e){$scope.variableGroups=e.varGroups,console.log("[BOTConsole] VarFactory.fetch: Loading variables"),console.log("[BOTConsole] VarFactory.fetch: Data"),console.log(e),$scope.variableGroups.forEach(function(e){e.varGroup.forEach(function(e){console.log("[BOTConsole] VarFactory.fetch: Object to be pushed"),console.log(e),pushVar(e.ID,e.value)})}),console.log("[BOTConsole] VarFactory.fetch: Variables"),console.log($scope.variables),console.log("[BOTConsole] VarFactory.fetch: Variable Groups"),console.log($scope.variableGroups)}),BotTriggerFactory.fetch().then(function(e){console.log("[BOTConsole] BotTriggerFactory.fetch: Loading bot triggers"),console.log("[BOTConsole] BotTriggerFactory.fetch: Data"),console.log(e),$scope.botTriggers=e.botTriggers}),$rootScope.$on("botTrigger",function(event,e){console.log("[BOTConsole] AppTriggerFactory.fetch: Bot trigger detected"),$scope.botTriggers.forEach(function(obj){e==obj.ID&&(console.log("[BOTConsole] $rootScope.$on: Executing bot trigger action for "+obj.ID),eval(obj.action))})}),$scope.clicked=0,$scope.showChat=!1,$scope.click=function(){$scope.state=0,$scope.showChat||0==$scope.clicked&&(console.log("[BOTConsole] Sending directive to bot."),setTimeout(function(){sendDirectivetoBot("DIRCITYINIT")},500),speechSynthesis.cancel()),$scope.clicked++,$scope.showChat=!$scope.showChat,console.log("[BOTConsole] $scope.click: "+$scope.clicked)},$scope.sayChat=function(){chatHistory("USER",$scope.Userinput.text,messageTime()),$scope.usermessage=$scope.Userinput.text,""==$scope.usermessage?console.log("[BOTConsole] sayChat: ERROR nothing to send"):(0==$scope.state?($('<div class="msg_b">'+$scope.usermessage+"</div>").insertBefore(".enter-msg"),messageBot()):1==$scope.state?($('<div class="msg_b">'+$scope.usermessage+"</div>").insertBefore(".enter-msg"),messageAI()):2==$scope.state&&sendChat(),$scope.Userinput.text="")}}],link:function(e,o,s){console.log("iAttrs"),console.log(s.$attr),console.log(e)}}}),chatbox.directive("ngCity",function(){return{controller:function(){}}});
//# sourceMappingURL=chatbox-directive.min.js.map